package backend.compiler;

import intermediate.ICode;
import intermediate.SymTab;
import intermediate.SymTabStack;
import message.*;

import static message.MessageType.COMPILER_SUMMARY;

import backend.Backend;
public class CodeGenerator extends Backend{
	/**
	 * Processes intermediate code and symbol table generated by parser
	 * to generate machine-language instructions.
	 * @param iCode the intermediate code in use.
	 * @param symTab the symbol table in use.
	 * @throws Exception if an error occurred.
	 */
	public void process(ICode iCode, SymTab symTab)
		throws Exception
	{
		long startTime = System.currentTimeMillis();
		float elapsedTime = (System.currentTimeMillis() - startTime) / 1000f;
		int instructionCount = 0;
		
		// Send the compiler summary message.
		sendMessage(new Message(COMPILER_SUMMARY,
								new Number[] {instructionCount,
											  elapsedTime}));
	}

	@Override
	public void addMessageListener(MessageListener listener) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void removeMessageListener(MessageListener listener) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void sendMessage(Message message) {
		// TODO Auto-generated method stub
		
	}
}
