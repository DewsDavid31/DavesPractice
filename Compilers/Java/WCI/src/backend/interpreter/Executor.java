	package backend.interpreter;
	import intermediate.ICode;
	import intermediate.SymTab;
import intermediate.SymTabStack;
import message.*;

	import static message.MessageType.INTERPRETER_SUMMARY;

import backend.Backend;
	public class Executor extends Backend {


	
		/**
		 * Processes intermediate code and symbol table generated by parser
		 * to generate machine-language instructions.
		 * @param iCode the intermediate code in use.
		 * @param symTab the symbol table in use.
		 * @throws Exception if an error occurred.
		 */
		public void process(ICode iCode, SymTab symTab)
			throws Exception
		{
			long startTime = System.currentTimeMillis();
			float elapsedTime = (System.currentTimeMillis() - startTime) / 1000f;
			int executionCount = 0;
			int runtimeErrors = 0;
			
			// Send the interpreter summary message.
			sendMessage(new Message(INTERPRETER_SUMMARY,
									new Number[] {executionCount,
												  runtimeErrors,
												  elapsedTime}));
		}

		@Override
		public void addMessageListener(MessageListener listener) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void removeMessageListener(MessageListener listener) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void sendMessage(Message message) {
			// TODO Auto-generated method stub
			
		}
}


